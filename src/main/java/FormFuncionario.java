//Lucas Raphael, 2525518 - Mateus Rodrigues, 2503700 - Norberto Junior, 2209136

import javax.swing.JOptionPane;

/**
 *
 * @author Mateus
 */
public class FormFuncionario extends javax.swing.JFrame {

    //MÉTODO SINGLETON
    private static FormFuncionario formFuncionarioUnico;

    private BDFuncionarios bdFuncionarios = BDFuncionarios.geraBDFuncionarios();
    private FuncionarioModel funcionarioAtual = new FuncionarioModel();

    private FormFuncionario() {
        initComponents();
        this.setLocationRelativeTo(null);
        setTitle("Depósito do Zé - Cadastro de Funcionários");
    }

    //MÉTODO SINGLETON
    public static FormFuncionario geraFormFuncionario() {
        if (formFuncionarioUnico == null) {
            formFuncionarioUnico = new FormFuncionario();
        }
        return formFuncionarioUnico;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rtDadosFun = new javax.swing.JLabel();
        rtEndFun = new javax.swing.JLabel();
        rtCpfFun = new javax.swing.JLabel();
        cxCpfFun = new javax.swing.JTextField();
        rtNomeFun = new javax.swing.JLabel();
        cxNomeFun = new javax.swing.JTextField();
        rtMatriculaFun = new javax.swing.JLabel();
        cxMatriculaFun = new javax.swing.JTextField();
        btInserir = new javax.swing.JButton();
        btConsultar = new javax.swing.JButton();
        btAlterar = new javax.swing.JButton();
        btExcluir = new javax.swing.JButton();
        btLimpar = new javax.swing.JButton();
        btSair = new javax.swing.JButton();
        rtRuaFun = new javax.swing.JLabel();
        cxRuaFun = new javax.swing.JTextField();
        rtNumCasaFun = new javax.swing.JLabel();
        cxNumCasaFun = new javax.swing.JTextField();
        rtCidFun = new javax.swing.JLabel();
        cxCidadeFun = new javax.swing.JTextField();
        rtEstadoFun = new javax.swing.JLabel();
        cxEstadoFun = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        rtDadosFun.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        rtDadosFun.setText("Dados do Funcionário");

        rtEndFun.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        rtEndFun.setText("Endereço");

        rtCpfFun.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        rtCpfFun.setText("CPF");

        rtNomeFun.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        rtNomeFun.setText("Nome");

        rtMatriculaFun.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        rtMatriculaFun.setText("Matrícula");

        btInserir.setText("Inserir");
        btInserir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btInserirActionPerformed(evt);
            }
        });

        btConsultar.setText("Consultar");
        btConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConsultarActionPerformed(evt);
            }
        });

        btAlterar.setText("Alterar");
        btAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAlterarActionPerformed(evt);
            }
        });

        btExcluir.setText("Excluir");
        btExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExcluirActionPerformed(evt);
            }
        });

        btLimpar.setText("Limpar");
        btLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLimparActionPerformed(evt);
            }
        });

        btSair.setText("Sair");
        btSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSairActionPerformed(evt);
            }
        });

        rtRuaFun.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        rtRuaFun.setText("Rua");

        rtNumCasaFun.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        rtNumCasaFun.setText("Numero");

        rtCidFun.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        rtCidFun.setText("Cidade");

        rtEstadoFun.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        rtEstadoFun.setText("Estado");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(13, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btInserir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btConsultar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btAlterar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btExcluir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btLimpar)
                        .addGap(12, 12, 12))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btSair)
                        .addContainerGap())))
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rtCpfFun)
                    .addComponent(rtDadosFun)
                    .addComponent(rtNomeFun)
                    .addComponent(rtMatriculaFun)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(cxMatriculaFun, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                        .addComponent(cxNomeFun, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(cxCpfFun, javax.swing.GroupLayout.Alignment.LEADING)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(rtEndFun)
                    .addComponent(rtNumCasaFun)
                    .addComponent(rtCidFun)
                    .addComponent(rtEstadoFun)
                    .addComponent(rtRuaFun)
                    .addComponent(cxCidadeFun)
                    .addComponent(cxEstadoFun, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                    .addComponent(cxNumCasaFun)
                    .addComponent(cxRuaFun))
                .addGap(51, 51, 51))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rtDadosFun)
                    .addComponent(rtEndFun))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rtCpfFun)
                    .addComponent(rtRuaFun))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cxCpfFun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cxRuaFun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rtNomeFun)
                    .addComponent(rtNumCasaFun))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cxNomeFun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cxNumCasaFun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rtMatriculaFun)
                    .addComponent(rtCidFun))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cxMatriculaFun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cxCidadeFun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(rtEstadoFun)
                .addGap(18, 18, 18)
                .addComponent(cxEstadoFun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btInserir)
                    .addComponent(btConsultar)
                    .addComponent(btAlterar)
                    .addComponent(btExcluir)
                    .addComponent(btLimpar))
                .addGap(9, 9, 9)
                .addComponent(btSair)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btInserirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btInserirActionPerformed
        insereFuncionario();
    }//GEN-LAST:event_btInserirActionPerformed

    private void btConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConsultarActionPerformed
        consultaFuncionario();
    }//GEN-LAST:event_btConsultarActionPerformed

    private void btAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAlterarActionPerformed
        alteraFuncionario();
    }//GEN-LAST:event_btAlterarActionPerformed

    private void btExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExcluirActionPerformed
        excluiFuncionario();
    }//GEN-LAST:event_btExcluirActionPerformed

    private void btLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLimparActionPerformed
        limparCampos();
    }//GEN-LAST:event_btLimparActionPerformed

    private void btSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSairActionPerformed
        sairForm();
    }//GEN-LAST:event_btSairActionPerformed

    public void insereFuncionario() {
        funcionarioAtual = new FuncionarioModel();
        EnderecoModel ender = new EnderecoModel();
        try {
            if (cxCpfFun.getText().isEmpty() || cxNomeFun.getText().isEmpty() || cxMatriculaFun.getText().isEmpty() ||
                cxRuaFun.getText().isEmpty() || cxNumCasaFun.getText().isEmpty() || cxCidadeFun.getText().isEmpty() ||
                cxEstadoFun.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Por favor, preencha todos os campos obrigatórios.", "Campos Vazios", JOptionPane.WARNING_MESSAGE);
                return;
            }

            funcionarioAtual.setCpf(cxCpfFun.getText());
            funcionarioAtual.setNome(cxNomeFun.getText());
            funcionarioAtual.setMatricula(Integer.parseInt(cxMatriculaFun.getText()));

            ender.setRua(cxRuaFun.getText());
            ender.setNumero(Integer.parseInt(cxNumCasaFun.getText()));
            ender.setCidade(cxCidadeFun.getText());
            ender.setEstado(cxEstadoFun.getText());
            funcionarioAtual.setEnder(ender);
            
            FuncionarioModel funcionarioInserido = bdFuncionarios.insereFuncionario(funcionarioAtual);

            if (funcionarioInserido != null) {
                JOptionPane.showMessageDialog(
                        this,
                        "Funcionário cadastrado com sucesso!",
                        "Cadastro de Funcionário",
                        JOptionPane.INFORMATION_MESSAGE
                );
                limparCampos();
            } else {
                JOptionPane.showMessageDialog(
                        this,
                        "Já existe um funcionário com este CPF ou Matrícula!",
                        "Cadastro de Funcionário",
                        JOptionPane.ERROR_MESSAGE
                );
                cxCpfFun.requestFocus();
            }
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(
                    this,
                    "Erro: CPF, Matrícula ou Número do Endereço devem ser números inteiros válidos!",
                    "Erro de Entrada",
                    JOptionPane.ERROR_MESSAGE
            );
        } catch (Exception e) {
            JOptionPane.showMessageDialog(
                    this,
                    "Ocorreu um erro inesperado: " + e.getMessage(),
                    "Erro",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }

    public void consultaFuncionario() {
        funcionarioAtual = new FuncionarioModel();
        try {
            if (cxCpfFun.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Por favor, digite o CPF para consultar.", "Campo Vazio", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            funcionarioAtual.setCpf(cxCpfFun.getText());
            
            FuncionarioModel funcionarioEncontrado = bdFuncionarios.consultaFuncionarioPorCpf(funcionarioAtual);

            if (funcionarioEncontrado != null) {
                cxCpfFun.setText(String.valueOf(funcionarioEncontrado.getCpf()));
                cxNomeFun.setText(funcionarioEncontrado.getNome());
                cxMatriculaFun.setText(String.valueOf(funcionarioEncontrado.getMatricula()));
                
                if(funcionarioEncontrado.getEnder() != null){
                    cxRuaFun.setText(funcionarioEncontrado.getEnder().getRua());
                    cxNumCasaFun.setText(String.valueOf(funcionarioEncontrado.getEnder().getNumero()));
                    cxCidadeFun.setText(funcionarioEncontrado.getEnder().getCidade());
                    cxEstadoFun.setText(funcionarioEncontrado.getEnder().getEstado());
                } else {
                    cxRuaFun.setText(""); cxNumCasaFun.setText(""); cxCidadeFun.setText(""); cxEstadoFun.setText("");
                }

                JOptionPane.showMessageDialog(
                        this,
                        "Funcionário encontrado com sucesso!",
                        "Consulta de Funcionário",
                        JOptionPane.INFORMATION_MESSAGE
                );
            } else {
                JOptionPane.showMessageDialog(
                        this,
                        "Funcionário não encontrado!",
                        "Consulta de Funcionário",
                        JOptionPane.INFORMATION_MESSAGE
                );
                limparCampos();
            }
        }
        catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(
                    this,
                    "Erro: O CPF deve ser um número inteiro válido para consulta!",
                    "Erro de Entrada",
                    JOptionPane.ERROR_MESSAGE
            );
            cxCpfFun.requestFocus();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(
                    this,
                    "Ocorreu um erro inesperado durante a consulta: " + e.getMessage(),
                    "Erro",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }

    public void alteraFuncionario() {
        FuncionarioModel funcionarioParaAlterar = new FuncionarioModel();
        try {
            if (cxCpfFun.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Por favor, digite o CPF do funcionário a ser alterado.", "Campo Vazio", JOptionPane.WARNING_MESSAGE);
                return;
            }
            funcionarioParaAlterar.setCpf(cxCpfFun.getText());
            FuncionarioModel funcionarioExistente = bdFuncionarios.consultaFuncionarioPorCpf(funcionarioParaAlterar);

            if (funcionarioExistente != null) {
                if (cxNomeFun.getText().isEmpty() || cxMatriculaFun.getText().isEmpty() ||
                    cxRuaFun.getText().isEmpty() || cxNumCasaFun.getText().isEmpty() || cxCidadeFun.getText().isEmpty() ||
                    cxEstadoFun.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Por favor, preencha todos os campos obrigatórios para alteração.", "Campos Vazios", JOptionPane.WARNING_MESSAGE);
                    return;
                }

                funcionarioExistente.setNome(cxNomeFun.getText());
                funcionarioExistente.setMatricula(Integer.parseInt(cxMatriculaFun.getText()));
                
                EnderecoModel novoEnder = funcionarioExistente.getEnder();
                if(novoEnder == null) {
                    novoEnder = new EnderecoModel();
                }
                novoEnder.setRua(cxRuaFun.getText());
                novoEnder.setNumero(Integer.parseInt(cxNumCasaFun.getText()));
                novoEnder.setCidade(cxCidadeFun.getText());
                novoEnder.setEstado(cxEstadoFun.getText());
                funcionarioExistente.setEnder(novoEnder);
                
                FuncionarioModel funcionarioAtualizado = bdFuncionarios.alteraFuncionario(funcionarioExistente);

                if (funcionarioAtualizado != null) {
                    JOptionPane.showMessageDialog(
                            this,
                            "Funcionário alterado com sucesso!",
                            "Alteração de Funcionário",
                            JOptionPane.INFORMATION_MESSAGE
                    );
                    limparCampos();
                } else {
                    JOptionPane.showMessageDialog(
                            this,
                            "Erro ao alterar funcionário. Verifique o CPF ou dados inválidos.",
                            "Alteração de Funcionário",
                            JOptionPane.ERROR_MESSAGE
                    );
                }
            } else {
                JOptionPane.showMessageDialog(
                        this,
                        "Funcionário não encontrado para alteração! Por favor, consulte primeiro.",
                        "Alteração de Funcionário",
                        JOptionPane.WARNING_MESSAGE
                );
                cxCpfFun.requestFocus();
            }
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(
                    this,
                    "Erro: CPF, Matrícula ou Número do Endereço devem ser números inteiros válidos para alteração!",
                    "Erro de Entrada",
                    JOptionPane.ERROR_MESSAGE
            );
        } catch (Exception e) {
            JOptionPane.showMessageDialog(
                    this,
                    "Ocorreu um erro inesperado durante a alteração: " + e.getMessage(),
                    "Erro",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }

    public void excluiFuncionario() {
        funcionarioAtual = new FuncionarioModel();
        try {
            if (cxCpfFun.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Por favor, digite o CPF do funcionário a ser excluído.", "Campo Vazio", JOptionPane.WARNING_MESSAGE);
                return;
            }

            funcionarioAtual.setCpf(cxCpfFun.getText());

            int confirm = JOptionPane.showConfirmDialog(
                    this,
                    "Tem certeza que deseja excluir o funcionário com CPF: " + funcionarioAtual.getCpf() + "?",
                    "Confirmação de Exclusão",
                    JOptionPane.YES_NO_OPTION
            );

            if (confirm == JOptionPane.YES_OPTION) {
                FuncionarioModel funcionarioRemovido = bdFuncionarios.excluiFuncionario(funcionarioAtual);

                if (funcionarioRemovido != null) {
                    JOptionPane.showMessageDialog(
                            this,
                            "Funcionário excluído com sucesso!",
                            "Exclusão de Funcionário",
                            JOptionPane.INFORMATION_MESSAGE
                    );
                    limparCampos();
                } else {
                    JOptionPane.showMessageDialog(
                            this,
                            "Funcionário não encontrado para exclusão!",
                            "Exclusão de Funcionário",
                            JOptionPane.INFORMATION_MESSAGE
                    );
                    cxCpfFun.requestFocus();
                }
            }
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(
                    this,
                    "Erro: O CPF deve ser um número inteiro válido para exclusão!",
                    "Erro de Entrada",
                    JOptionPane.ERROR_MESSAGE
            );
            cxCpfFun.requestFocus();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(
                    this,
                    "Ocorreu um erro inesperado durante a exclusão: " + e.getMessage(),
                    "Erro",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }

    public void limparCampos() {
        cxCpfFun.setText("");
        cxNomeFun.setText("");
        cxMatriculaFun.setText("");
        cxRuaFun.setText("");
        cxNumCasaFun.setText("");
        cxCidadeFun.setText("");
        cxEstadoFun.setText("");
        cxCpfFun.requestFocus();
    }

    public void sairForm() {
        int resp = JOptionPane.showConfirmDialog(
                this,
                "Deseja realmente fechar o cadastro de funcionários?",
                "Saída",
                JOptionPane.YES_NO_OPTION
        );
        if (resp == JOptionPane.YES_OPTION) {
            dispose();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAlterar;
    private javax.swing.JButton btConsultar;
    private javax.swing.JButton btExcluir;
    private javax.swing.JButton btInserir;
    private javax.swing.JButton btLimpar;
    private javax.swing.JButton btSair;
    private javax.swing.JTextField cxCidadeFun;
    private javax.swing.JTextField cxCpfFun;
    private javax.swing.JTextField cxEstadoFun;
    private javax.swing.JTextField cxMatriculaFun;
    private javax.swing.JTextField cxNomeFun;
    private javax.swing.JTextField cxNumCasaFun;
    private javax.swing.JTextField cxRuaFun;
    private javax.swing.JLabel rtCidFun;
    private javax.swing.JLabel rtCpfFun;
    private javax.swing.JLabel rtDadosFun;
    private javax.swing.JLabel rtEndFun;
    private javax.swing.JLabel rtEstadoFun;
    private javax.swing.JLabel rtMatriculaFun;
    private javax.swing.JLabel rtNomeFun;
    private javax.swing.JLabel rtNumCasaFun;
    private javax.swing.JLabel rtRuaFun;
    // End of variables declaration//GEN-END:variables
}
