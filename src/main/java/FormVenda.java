//Lucas Raphael, 2525518 - Mateus Rodrigues, 2503700 - Norberto Junior, 2209136

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Date;


/**
 *
 * @author Mateus
 */
public class FormVenda extends javax.swing.JFrame {

    private static final Logger logger = Logger.getLogger(FormVenda.class.getName());

    //MÉTODO SINGLETON
    private static FormVenda formVendaUnico;

    private BDClientes bdClientes = BDClientes.geraBDClientes();
    private BDFuncionarios bdFuncionarios = BDFuncionarios.geraBDFuncionarios();
    private BDEstoque bdEstoque = BDEstoque.geraBDEstoque();
    private BDVendas bdVendas = BDVendas.geraBDVendas();

    private VendaModel vendaAtual = new VendaModel();
    private ArrayList<ItensModel> itensDaVenda = new ArrayList<>();

    private FormVenda() {
        initComponents();
        this.setLocationRelativeTo(null);
        setTitle("Depósito do Zé - Nova Venda");

        configurarTabelaItens(); 
        popularComboBoxesFuncionarios();
        atualizarTotalVenda();
        limparVenda();
    }

    //MÉTODO SINGLETON
    public static FormVenda geraFormVenda() {
        if (formVendaUnico == null) {
            formVendaUnico = new FormVenda();
        }
        return formVendaUnico;
    }
    
    private void configurarTabelaItens() {
        DefaultTableModel modeloTabelaItens = (DefaultTableModel) tabelaItensVenda.getModel();
        modeloTabelaItens.setRowCount(0);
    }

    private void popularComboBoxesFuncionarios() {
        cbFunVenda.removeAllItems();
        cbFunVenda.addItem("Vendedor");
        for (FuncionarioModel f : bdFuncionarios.getListaFuncionarios()) {
            cbFunVenda.addItem(f.getNome() + " (Matrícula: " + f.getMatricula() + ")");
        }
    }

    private ClienteModel getClienteAtivo() {
        return vendaAtual.getCliente();
    }

    private FuncionarioModel getFuncionarioSelecionado() {
        int selectedIndex = cbFunVenda.getSelectedIndex();
        if (selectedIndex > 0 && selectedIndex <= bdFuncionarios.getListaFuncionarios().size()) {
            return bdFuncionarios.getListaFuncionarios().get(selectedIndex - 1); 
        }
        return null;
    }

    private void atualizarTotalVenda() {
        double total = vendaAtual.calcular();
        cxTotalVenda.setText(String.format("R$ %.2f", total));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rtNf = new javax.swing.JLabel();
        cxNf = new javax.swing.JTextField();
        rtDataVenda = new javax.swing.JLabel();
        cxDataVenda = new javax.swing.JTextField();
        rtClienteVenda = new javax.swing.JLabel();
        cxClienteVenda = new javax.swing.JTextField();
        btBuscarCliente = new javax.swing.JButton();
        cxClienteEncontrado = new javax.swing.JTextField();
        rtFunVenda = new javax.swing.JLabel();
        rtAdItem = new javax.swing.JLabel();
        rtCodItem = new javax.swing.JLabel();
        cxCodItem = new javax.swing.JTextField();
        rtQuantItem = new javax.swing.JLabel();
        cxQuantItem = new javax.swing.JTextField();
        btAdItem = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaItensVenda = new javax.swing.JTable();
        rtTotalVenda = new javax.swing.JLabel();
        cxTotalVenda = new javax.swing.JTextField();
        btRegistVenda = new javax.swing.JButton();
        rtVenda = new javax.swing.JLabel();
        cbFunVenda = new javax.swing.JComboBox<>();
        btLimpar = new javax.swing.JButton();
        btSair = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        rtNf.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        rtNf.setText("Nota Fiscal");

        rtDataVenda.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        rtDataVenda.setText("Data");

        cxDataVenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cxDataVendaActionPerformed(evt);
            }
        });

        rtClienteVenda.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        rtClienteVenda.setText("Cliente (CPF)");

        btBuscarCliente.setText("Buscar");
        btBuscarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btBuscarClienteActionPerformed(evt);
            }
        });

        rtFunVenda.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        rtFunVenda.setText("Funcionário");

        rtAdItem.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        rtAdItem.setText("Adicionar Item:");

        rtCodItem.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        rtCodItem.setText("Código");

        rtQuantItem.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        rtQuantItem.setText("Quantidade");

        btAdItem.setText("Adicionar");
        btAdItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAdItemActionPerformed(evt);
            }
        });

        tabelaItensVenda.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Nome", "Valor"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabelaItensVenda);

        rtTotalVenda.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        rtTotalVenda.setText("Total");

        btRegistVenda.setText("Registrar Venda");
        btRegistVenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRegistVendaActionPerformed(evt);
            }
        });

        rtVenda.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        rtVenda.setText("Nova Venda");

        btLimpar.setText("Limpar");
        btLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLimparActionPerformed(evt);
            }
        });

        btSair.setText("Sair");
        btSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSairActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rtVenda)
                            .addComponent(cxClienteEncontrado, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(rtFunVenda)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cbFunVenda, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(rtTotalVenda)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(cxTotalVenda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(rtAdItem, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(rtCodItem)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(cxCodItem, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(rtQuantItem)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(cxQuantItem, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btAdItem))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(rtClienteVenda)
                                        .addGap(18, 18, 18)
                                        .addComponent(cxClienteVenda, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(rtNf)
                                        .addGap(18, 18, 18)
                                        .addComponent(cxNf, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(rtDataVenda)
                                        .addGap(9, 9, 9)
                                        .addComponent(cxDataVenda, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(btBuscarCliente))))
                        .addGap(0, 15, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(btRegistVenda)
                        .addGap(54, 54, 54)
                        .addComponent(btLimpar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btSair)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(rtVenda)
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rtNf)
                    .addComponent(cxNf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rtDataVenda)
                    .addComponent(cxDataVenda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rtClienteVenda)
                    .addComponent(cxClienteVenda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btBuscarCliente))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cxClienteEncontrado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rtFunVenda)
                    .addComponent(cbFunVenda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(rtAdItem)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rtCodItem)
                    .addComponent(cxCodItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rtQuantItem)
                    .addComponent(cxQuantItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btAdItem))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rtTotalVenda)
                    .addComponent(cxTotalVenda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btRegistVenda)
                    .addComponent(btSair)
                    .addComponent(btLimpar))
                .addContainerGap(8, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLimparActionPerformed
        limparVenda();
    }//GEN-LAST:event_btLimparActionPerformed

    private void btSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSairActionPerformed
        sairForm();
    }//GEN-LAST:event_btSairActionPerformed

    private void cxDataVendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cxDataVendaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cxDataVendaActionPerformed

    private void btBuscarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btBuscarClienteActionPerformed
        buscarClienteParaVenda();
    }//GEN-LAST:event_btBuscarClienteActionPerformed

    private void btRegistVendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRegistVendaActionPerformed
        registrarVenda();
    }//GEN-LAST:event_btRegistVendaActionPerformed

    private void btAdItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAdItemActionPerformed
        adicionarItemVenda();
    }//GEN-LAST:event_btAdItemActionPerformed

    public void buscarClienteParaVenda() {
        try {
            if (cxClienteVenda.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Digite o CPF ou ID do cliente para buscar.", "Campo Vazio", JOptionPane.WARNING_MESSAGE);
                return;
            }
            String cpfOuId = (cxClienteVenda.getText());
            
            ClienteModel clienteBuscado = null;
            ClienteModel tempCliente = new ClienteModel();
            tempCliente.setCpf(cpfOuId);
            clienteBuscado = bdClientes.consultaClientePorCpf(tempCliente);

            if (clienteBuscado == null) {
                clienteBuscado = bdClientes.consultaClientePorId(cpfOuId);
            }

            if (clienteBuscado != null) {
                vendaAtual.setCliente(clienteBuscado);
                cxClienteEncontrado.setText("Nome: " + clienteBuscado.getNome());
                JOptionPane.showMessageDialog(this, "Cliente encontrado: " + clienteBuscado.getNome(), "Cliente Encontrado", JOptionPane.INFORMATION_MESSAGE);
            } else {
                vendaAtual.setCliente(null);
                cxClienteEncontrado.setText("Nome: Não encontrado");
                JOptionPane.showMessageDialog(this, "Cliente não encontrado.", "Erro de Busca", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(this, "Erro: CPF ou ID do cliente deve ser um número inteiro.", "Erro de Entrada", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            logger.log(java.util.logging.Level.SEVERE, "Erro ao buscar cliente para venda", e);
            JOptionPane.showMessageDialog(this, "Erro inesperado: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void adicionarItemVenda() {
        try {
            if (cxCodItem.getText().isEmpty() || cxQuantItem.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Preencha o Código do Material e a Quantidade.", "Campos Vazios", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            int codigoMaterial = Integer.parseInt(cxCodItem.getText());
            int quantidadeDesejada = Integer.parseInt(cxQuantItem.getText());

            MateriaisModel materialDoEstoque = bdEstoque.consultaMaterialPorCodigo(codigoMaterial);

            if (materialDoEstoque == null) {
                JOptionPane.showMessageDialog(this, "Material não encontrado no estoque.", "Erro de Item", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            if (quantidadeDesejada <= 0) {
                 JOptionPane.showMessageDialog(this, "A quantidade deve ser maior que zero.", "Quantidade Inválida", JOptionPane.WARNING_MESSAGE);
                 return;
            }

            if (quantidadeDesejada > materialDoEstoque.getQuantidade()) {
                throw new EstoqueInsufException("Estoque insuficiente para " + materialDoEstoque.getNome() + ". Disponível: " + materialDoEstoque.getQuantidade());
            }

            ItensModel novoItem = new ItensModel();
            novoItem.setMaterial(materialDoEstoque);
            novoItem.setQuantidade(quantidadeDesejada);
            novoItem.setSubtotal(novoItem.calcular());

            itensDaVenda.add(novoItem);
            vendaAtual.setItens(itensDaVenda.toArray(new ItensModel[0])); 

            atualizarTabelaItensVenda();
            atualizarTotalVenda();

            cxCodItem.setText(""); 
            cxQuantItem.setText(""); 
            cxCodItem.requestFocus(); 

        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(this, "Erro: Código do material e Quantidade devem ser números inteiros.", "Erro de Entrada", JOptionPane.ERROR_MESSAGE);
        } catch (EstoqueInsufException e) {
            JOptionPane.showMessageDialog(this, "Erro de Estoque: " + e.getMessage(), "Estoque Insuficiente", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            logger.log(java.util.logging.Level.SEVERE, "Erro ao adicionar item à venda", e);
            JOptionPane.showMessageDialog(this, "Erro inesperado: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void atualizarTabelaItensVenda() {
        DefaultTableModel modelo = (DefaultTableModel) tabelaItensVenda.getModel();
        modelo.setRowCount(0);

        for (ItensModel item : itensDaVenda) {
            modelo.addRow(new Object[]{
                item.getMaterial().getCodigo(),
                item.getMaterial().getNome(),
                item.getMaterial().getValor()
            });
        }
    }

    public void registrarVenda() {
        if (getClienteAtivo() == null) { 
            JOptionPane.showMessageDialog(this, "Selecione e busque um cliente para a venda.", "Erro de Venda", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (getFuncionarioSelecionado() == null) {
            JOptionPane.showMessageDialog(this, "Selecione um funcionário para a venda.", "Erro de Venda", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (itensDaVenda.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Adicione pelo menos um item à venda.", "Erro de Venda", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (cxNf.getText().isEmpty() || cxDataVenda.getText().isEmpty()) { 
            JOptionPane.showMessageDialog(this, "Preencha a Nota Fiscal e a Data da Venda.", "Campos Vazios", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        vendaAtual.setCliente(getClienteAtivo());
        vendaAtual.setFuncionario(getFuncionarioSelecionado());
        vendaAtual.setItens(itensDaVenda.toArray(new ItensModel[0])); 
        vendaAtual.setNf(cxNf.getText()); 
        vendaAtual.setData(cxDataVenda.getText()); 

        try {
            for (ItensModel item : itensDaVenda) {
                MateriaisModel materialOriginal = bdEstoque.consultaMaterialPorCodigo(item.getMaterial().getCodigo());
                if (materialOriginal != null) {
                    materialOriginal.setQuantidade(materialOriginal.getQuantidade() - item.getQuantidade());
                    bdEstoque.alteraMaterial(materialOriginal); 
                }
            }

            VendaModel vendaRegistrada = bdVendas.insereVenda(vendaAtual);

            if (vendaRegistrada != null) {
                JOptionPane.showMessageDialog(this, "Venda registrada com sucesso!", "Venda Concluída", JOptionPane.INFORMATION_MESSAGE);
                limparVenda();
            } else {
                JOptionPane.showMessageDialog(this, "Erro ao registrar venda. Nota Fiscal já existe ou outro problema.", "Erro de Venda", JOptionPane.ERROR_MESSAGE);
            }
        } catch (IllegalArgumentException e) { 
            JOptionPane.showMessageDialog(this, "Erro ao atualizar estoque: " + e.getMessage(), "Erro de Estoque", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            logger.log(java.util.logging.Level.SEVERE, "Erro inesperado ao registrar venda", e);
            JOptionPane.showMessageDialog(this, "Ocorreu um erro inesperado: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public void limparVenda() {
        cxNf.setText(""); 
        cxDataVenda.setText("");
        cxClienteVenda.setText(""); 
        cxClienteEncontrado.setText("Cliente: "); 
        cbFunVenda.setSelectedIndex(0); 
        cxCodItem.setText(""); 
        cxQuantItem.setText(""); 
        
        itensDaVenda.clear(); 
        atualizarTabelaItensVenda(); 
        
        vendaAtual = new VendaModel(); 
        atualizarTotalVenda(); 
        cxNf.requestFocus(); 
    }

    public void sairForm() {
        int resp = JOptionPane.showConfirmDialog(
                this,
                "Deseja realmente fechar o registro de vendas?",
                "Saída",
                JOptionPane.YES_NO_OPTION
        );
        if (resp == JOptionPane.YES_OPTION) {
            dispose(); 
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAdItem;
    private javax.swing.JButton btBuscarCliente;
    private javax.swing.JButton btLimpar;
    private javax.swing.JButton btRegistVenda;
    private javax.swing.JButton btSair;
    private javax.swing.JComboBox<String> cbFunVenda;
    private javax.swing.JTextField cxClienteEncontrado;
    private javax.swing.JTextField cxClienteVenda;
    private javax.swing.JTextField cxCodItem;
    private javax.swing.JTextField cxDataVenda;
    private javax.swing.JTextField cxNf;
    private javax.swing.JTextField cxQuantItem;
    private javax.swing.JTextField cxTotalVenda;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel rtAdItem;
    private javax.swing.JLabel rtClienteVenda;
    private javax.swing.JLabel rtCodItem;
    private javax.swing.JLabel rtDataVenda;
    private javax.swing.JLabel rtFunVenda;
    private javax.swing.JLabel rtNf;
    private javax.swing.JLabel rtQuantItem;
    private javax.swing.JLabel rtTotalVenda;
    private javax.swing.JLabel rtVenda;
    private javax.swing.JTable tabelaItensVenda;
    // End of variables declaration//GEN-END:variables
}
