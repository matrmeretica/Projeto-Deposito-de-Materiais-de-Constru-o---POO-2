//Lucas Raphael, 2525518 - Mateus Rodrigues, 2503700 - Norberto Junior, 2209136

import javax.swing.JOptionPane;
import java.util.logging.Logger;

/**
 *
 * @author Mateus
 */
public class FormCliente extends javax.swing.JFrame {

    private static final Logger logger = Logger.getLogger(FormCliente.class.getName());

    //MÉTODO SINGLETON
    private static FormCliente formClienteUnico; 

    private BDClientes bdClientes = BDClientes.geraBDClientes();
    private BDFuncionarios bdFuncionarios = BDFuncionarios.geraBDFuncionarios();
    
    private ClienteModel clienteAtual = new ClienteModel();


    private FormCliente() {
        initComponents();
        this.setLocationRelativeTo(null);
        setTitle("Depósito do Zé - Cadastro de Clientes");
        popularComboBoxVendedores();
    }

    //MÉTODO SINGLETON
    public static FormCliente geraFormCliente() {
        if (formClienteUnico == null) {
            formClienteUnico = new FormCliente();
        }
        return formClienteUnico;
    }

    private void popularComboBoxVendedores() {
        cbVendedorResponsavel.removeAllItems();
        cbVendedorResponsavel.addItem("Selecione um Vendedor");
        for (FuncionarioModel f : bdFuncionarios.getListaFuncionarios()) {
            cbVendedorResponsavel.addItem(f.getNome() + " (Matrícula: " + f.getMatricula() + ")");
        }
    }

    private FuncionarioModel getVendedorSelecionado() {
        int selectedIndex = cbVendedorResponsavel.getSelectedIndex();
        if (selectedIndex > 0 && selectedIndex <= bdFuncionarios.getListaFuncionarios().size()) {
            return bdFuncionarios.getListaFuncionarios().get(selectedIndex - 1);
        }
        return null;
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btInserir12 = new javax.swing.JButton();
        btConsultar = new javax.swing.JButton();
        btAlterar = new javax.swing.JButton();
        btExcluir = new javax.swing.JButton();
        btLimpar = new javax.swing.JButton();
        btSair = new javax.swing.JButton();
        rtCpfCliente = new javax.swing.JLabel();
        cxCpfCliente = new javax.swing.JTextField();
        rtNomeCliente = new javax.swing.JLabel();
        cxNomeCliente = new javax.swing.JTextField();
        rtIdCliente = new javax.swing.JLabel();
        cxIdCliente = new javax.swing.JTextField();
        rtVendRespCliente = new javax.swing.JLabel();
        rtRuaCliente = new javax.swing.JLabel();
        cxRuaCliente = new javax.swing.JTextField();
        rtNumCasaCliente = new javax.swing.JLabel();
        cxNumCasaCliente = new javax.swing.JTextField();
        rtCidCliente = new javax.swing.JLabel();
        cxCidadeCliente = new javax.swing.JTextField();
        rtEstadoCliente = new javax.swing.JLabel();
        cxEstadoCliente = new javax.swing.JTextField();
        rtDadosCliente = new javax.swing.JLabel();
        rtEndCliente = new javax.swing.JLabel();
        cbVendedorResponsavel = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btInserir12.setText("Inserir");
        btInserir12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btInserir12ActionPerformed(evt);
            }
        });

        btConsultar.setText("Consultar");
        btConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConsultarActionPerformed(evt);
            }
        });

        btAlterar.setText("Alterar");
        btAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAlterarActionPerformed(evt);
            }
        });

        btExcluir.setText("Excluir");
        btExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExcluirActionPerformed(evt);
            }
        });

        btLimpar.setText("Limpar");
        btLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLimparActionPerformed(evt);
            }
        });

        btSair.setText("Sair");
        btSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSairActionPerformed(evt);
            }
        });

        rtCpfCliente.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        rtCpfCliente.setText("CPF");

        rtNomeCliente.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        rtNomeCliente.setText("Nome");

        rtIdCliente.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        rtIdCliente.setText("ID");

        rtVendRespCliente.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        rtVendRespCliente.setText("Vendedor Reponsável");

        rtRuaCliente.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        rtRuaCliente.setText("Rua");

        rtNumCasaCliente.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        rtNumCasaCliente.setText("Número");

        rtCidCliente.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        rtCidCliente.setText("Cidade");

        cxCidadeCliente.setActionCommand("<Not Set>");

        rtEstadoCliente.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        rtEstadoCliente.setText("Estado");

        rtDadosCliente.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        rtDadosCliente.setText("Dados do Cliente");

        rtEndCliente.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        rtEndCliente.setText("Endereço");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btInserir12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btConsultar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btAlterar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btExcluir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btLimpar)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(378, 378, 378)
                        .addComponent(btSair)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rtCpfCliente)
                    .addComponent(rtNomeCliente)
                    .addComponent(rtIdCliente)
                    .addComponent(rtDadosCliente)
                    .addComponent(rtVendRespCliente)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(cxNomeCliente, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                        .addComponent(cxCpfCliente, javax.swing.GroupLayout.Alignment.LEADING))
                    .addComponent(cbVendedorResponsavel, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cxIdCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(59, 59, 59)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(rtEndCliente)
                    .addComponent(rtEstadoCliente)
                    .addComponent(rtCidCliente)
                    .addComponent(rtNumCasaCliente)
                    .addComponent(rtRuaCliente)
                    .addComponent(cxRuaCliente, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                    .addComponent(cxCidadeCliente)
                    .addComponent(cxEstadoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cxNumCasaCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rtDadosCliente)
                    .addComponent(rtEndCliente))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rtCpfCliente)
                    .addComponent(rtRuaCliente))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cxCpfCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cxRuaCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rtNomeCliente)
                    .addComponent(rtNumCasaCliente))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cxNomeCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cxNumCasaCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rtIdCliente)
                    .addComponent(rtCidCliente))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cxIdCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cxCidadeCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rtVendRespCliente)
                    .addComponent(rtEstadoCliente))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cxEstadoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbVendedorResponsavel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btInserir12)
                    .addComponent(btConsultar)
                    .addComponent(btAlterar)
                    .addComponent(btExcluir)
                    .addComponent(btLimpar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btSair)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btInserir12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btInserir12ActionPerformed
        insereCliente();
    }//GEN-LAST:event_btInserir12ActionPerformed

    private void btConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConsultarActionPerformed
        consultaCliente();
    }//GEN-LAST:event_btConsultarActionPerformed

    private void btAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAlterarActionPerformed
        alteraCliente();
    }//GEN-LAST:event_btAlterarActionPerformed

    private void btExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExcluirActionPerformed
        excluiCliente();
    }//GEN-LAST:event_btExcluirActionPerformed

    private void btLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLimparActionPerformed
        limparCampos();
    }//GEN-LAST:event_btLimparActionPerformed

    private void btSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSairActionPerformed
        sairForm();
    }//GEN-LAST:event_btSairActionPerformed

    public void insereCliente() {
        clienteAtual = new ClienteModel(); 
        EnderecoModel ender = new EnderecoModel(); 
        try {
            if (cxCpfCliente.getText().isEmpty() || cxNomeCliente.getText().isEmpty() || cxIdCliente.getText().isEmpty() ||
                cxRuaCliente.getText().isEmpty() || cxNumCasaCliente.getText().isEmpty() || cxCidadeCliente.getText().isEmpty() ||
                cxEstadoCliente.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Por favor, preencha todos os campos obrigatórios.", "Campos Vazios", JOptionPane.WARNING_MESSAGE);
                return;
            }

            clienteAtual.setCpf(cxCpfCliente.getText());
            clienteAtual.setNome(cxNomeCliente.getText());
            clienteAtual.setId(cxIdCliente.getText());

            ender.setRua(cxRuaCliente.getText());
            ender.setNumero(Integer.parseInt(cxNumCasaCliente.getText())); 
            ender.setCidade(cxCidadeCliente.getText());
            ender.setEstado(cxEstadoCliente.getText());
            clienteAtual.setEnder(ender);

            FuncionarioModel vendedorSelecionado = getVendedorSelecionado();
            if (vendedorSelecionado == null && cbVendedorResponsavel.getSelectedIndex() != 0) {
                 JOptionPane.showMessageDialog(this, "Vendedor responsável inválido. Selecione um vendedor válido ou 'Selecione um Vendedor'.", "Erro de Vendedor", JOptionPane.WARNING_MESSAGE);
                 return;
            }
            clienteAtual.setVendedorResponsavel(vendedorSelecionado);
            
            ClienteModel clienteInserido = bdClientes.insereCliente(clienteAtual);

            if (clienteInserido != null) {
                JOptionPane.showMessageDialog(
                        this,
                        "Cliente cadastrado com sucesso!",
                        "Cadastro de Cliente",
                        JOptionPane.INFORMATION_MESSAGE
                );
                limparCampos();
            } else {
                JOptionPane.showMessageDialog(
                        this,
                        "Já existe um cliente com este CPF ou ID!",
                        "Cadastro de Cliente",
                        JOptionPane.ERROR_MESSAGE
                );
                cxCpfCliente.requestFocus(); 
            }
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(
                    this,
                    "Erro: CPF, ID ou Número do Endereço devem ser números inteiros válidos!",
                    "Erro de Entrada",
                    JOptionPane.ERROR_MESSAGE
            );
        } catch (Exception e) { 
            logger.log(java.util.logging.Level.SEVERE, "Erro inesperado ao inserir cliente", e);
            JOptionPane.showMessageDialog(
                    this,
                    "Ocorreu um erro inesperado: " + e.getMessage(),
                    "Erro",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }

    public void consultaCliente() {
        clienteAtual = new ClienteModel(); 
        try {
            if (cxCpfCliente.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Por favor, digite o CPF para consultar.", "Campo Vazio", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            clienteAtual.setCpf(cxCpfCliente.getText()); 

            ClienteModel clienteEncontrado = bdClientes.consultaClientePorCpf(clienteAtual);

            if (clienteEncontrado != null) {
                cxCpfCliente.setText((clienteEncontrado.getCpf()));
                cxNomeCliente.setText(clienteEncontrado.getNome());
                cxIdCliente.setText((clienteEncontrado.getId()));
                
                if(clienteEncontrado.getEnder() != null){
                    cxRuaCliente.setText(clienteEncontrado.getEnder().getRua());
                    cxNumCasaCliente.setText(String.valueOf(clienteEncontrado.getEnder().getNumero())); 
                    cxCidadeCliente.setText(clienteEncontrado.getEnder().getCidade());
                    cxEstadoCliente.setText(clienteEncontrado.getEnder().getEstado());
                } else {
                    cxRuaCliente.setText(""); cxNumCasaCliente.setText(""); cxCidadeCliente.setText(""); cxEstadoCliente.setText("");
                }

                if(clienteEncontrado.getVendedorResponsavel() != null){
                    String nomeMatriculaVendedor = clienteEncontrado.getVendedorResponsavel().getNome() + " (Matrícula: " + clienteEncontrado.getVendedorResponsavel().getMatricula() + ")";
                    cbVendedorResponsavel.setSelectedItem(nomeMatriculaVendedor);
                } else {
                    cbVendedorResponsavel.setSelectedIndex(0);
                }

                JOptionPane.showMessageDialog(
                        this,
                        "Cliente encontrado com sucesso!",
                        "Consulta de Cliente",
                        JOptionPane.INFORMATION_MESSAGE
                );
            } else {
                JOptionPane.showMessageDialog(
                        this,
                        "Cliente não encontrado!",
                        "Consulta de Cliente",
                        JOptionPane.INFORMATION_MESSAGE
                );
                limparCampos(); 
            }
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(
                    this,
                    "Erro: O CPF deve ser um número inteiro válido para consulta!",
                    "Erro de Entrada",
                    JOptionPane.ERROR_MESSAGE
            );
            cxCpfCliente.requestFocus(); 
        } catch (Exception e) {
            logger.log(java.util.logging.Level.SEVERE, "Erro inesperado ao consultar cliente", e);
            JOptionPane.showMessageDialog(
                    this,
                    "Ocorreu um erro inesperado durante a consulta: " + e.getMessage(),
                    "Erro",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }

    public void alteraCliente() {
        ClienteModel clienteParaAlterar = new ClienteModel();
        try {
            if (cxCpfCliente.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Por favor, digite o CPF do cliente a ser alterado.", "Campo Vazio", JOptionPane.WARNING_MESSAGE);
                return;
            }
            clienteParaAlterar.setCpf(cxCpfCliente.getText());
            ClienteModel clienteExistente = bdClientes.consultaClientePorCpf(clienteParaAlterar);

            if (clienteExistente != null) {
                if (cxNomeCliente.getText().isEmpty() || cxIdCliente.getText().isEmpty() ||
                    cxRuaCliente.getText().isEmpty() || cxNumCasaCliente.getText().isEmpty() || cxCidadeCliente.getText().isEmpty() ||
                    cxEstadoCliente.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Por favor, preencha todos os campos obrigatórios para alteração.", "Campos Vazios", JOptionPane.WARNING_MESSAGE);
                    return;
                }

                clienteExistente.setNome(cxNomeCliente.getText());
                clienteExistente.setId(cxIdCliente.getText());
                
                EnderecoModel novoEnder = clienteExistente.getEnder();
                if(novoEnder == null) {
                    novoEnder = new EnderecoModel();
                }
                novoEnder.setRua(cxRuaCliente.getText());
                novoEnder.setNumero(Integer.parseInt(cxNumCasaCliente.getText())); 
                novoEnder.setCidade(cxCidadeCliente.getText());
                novoEnder.setEstado(cxEstadoCliente.getText());
                clienteExistente.setEnder(novoEnder);

                FuncionarioModel vendedorSelecionado = getVendedorSelecionado();
                if (vendedorSelecionado == null && cbVendedorResponsavel.getSelectedIndex() != 0) {
                     JOptionPane.showMessageDialog(this, "Vendedor responsável inválido. Selecione um vendedor válido ou 'Selecione um Vendedor'.", "Erro de Vendedor", JOptionPane.WARNING_MESSAGE);
                     return;
                }
                clienteExistente.setVendedorResponsavel(vendedorSelecionado);
                
                ClienteModel clienteAtualizado = bdClientes.alteraCliente(clienteExistente);

                if (clienteAtualizado != null) {
                    JOptionPane.showMessageDialog(
                            this,
                            "Cliente alterado com sucesso!",
                            "Alteração de Cliente",
                            JOptionPane.INFORMATION_MESSAGE
                    );
                    limparCampos();
                } else {
                    JOptionPane.showMessageDialog(
                            this,
                            "Erro ao alterar cliente. Verifique o CPF ou dados inválidos.",
                            "Alteração de Cliente",
                            JOptionPane.ERROR_MESSAGE
                    );
                }
            } else {
                JOptionPane.showMessageDialog(
                        this,
                        "Cliente não encontrado para alteração! Por favor, consulte primeiro.",
                        "Alteração de Cliente",
                        JOptionPane.WARNING_MESSAGE
                );
                cxCpfCliente.requestFocus();
            }
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(
                    this,
                    "Erro: CPF, ID ou Número do Endereço devem ser números inteiros válidos para alteração!",
                    "Erro de Entrada",
                    JOptionPane.ERROR_MESSAGE
            );
        } catch (Exception e) {
            logger.log(java.util.logging.Level.SEVERE, "Erro inesperado durante a alteração", e);
            JOptionPane.showMessageDialog(
                    this,
                    "Ocorreu um erro inesperado durante a alteração: " + e.getMessage(),
                    "Erro",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }

    public void excluiCliente() {
        clienteAtual = new ClienteModel(); 
        try {
            if (cxCpfCliente.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Por favor, digite o CPF do cliente a ser excluído.", "Campo Vazio", JOptionPane.WARNING_MESSAGE);
                return;
            }

            clienteAtual.setCpf(cxCpfCliente.getText()); 

            int confirm = JOptionPane.showConfirmDialog(
                    this,
                    "Tem certeza que deseja excluir o cliente com CPF: " + clienteAtual.getCpf() + "?",
                    "Confirmação de Exclusão",
                    JOptionPane.YES_NO_OPTION
            );

            if (confirm == JOptionPane.YES_OPTION) {
                ClienteModel clienteRemovido = bdClientes.excluiCliente(clienteAtual); 

                if (clienteRemovido != null) {
                    JOptionPane.showMessageDialog(
                            this,
                            "Cliente excluído com sucesso!",
                            "Exclusão de Cliente",
                            JOptionPane.INFORMATION_MESSAGE
                    );
                    limparCampos();
                } else {
                    JOptionPane.showMessageDialog(
                            this,
                            "Cliente não encontrado para exclusão!",
                            "Exclusão de Cliente",
                            JOptionPane.INFORMATION_MESSAGE
                    );
                    cxCpfCliente.requestFocus(); 
                }
            }
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(
                    this,
                    "Erro: O CPF deve ser um número inteiro válido para exclusão!",
                    "Erro de Entrada",
                    JOptionPane.ERROR_MESSAGE
            );
            cxCpfCliente.requestFocus(); 
        } catch (Exception e) {
            logger.log(java.util.logging.Level.SEVERE, "Erro inesperado durante a exclusão", e);
            JOptionPane.showMessageDialog(
                    this,
                    "Ocorreu um erro inesperado durante a exclusão: " + e.getMessage(),
                    "Erro",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }

    public void limparCampos() {
        cxCpfCliente.setText("");
        cxNomeCliente.setText("");
        cxIdCliente.setText("");
        cxRuaCliente.setText("");
        cxNumCasaCliente.setText("");
        cxCidadeCliente.setText("");
        cxEstadoCliente.setText("");
        cbVendedorResponsavel.setSelectedIndex(0);
        cxCpfCliente.requestFocus(); 
    }

    public void sairForm() {
        int resp = JOptionPane.showConfirmDialog(
                this,
                "Deseja realmente fechar o cadastro de clientes?",
                "Saída",
                JOptionPane.YES_NO_OPTION
        );
        if (resp == JOptionPane.YES_OPTION) {
            dispose(); 
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAlterar;
    private javax.swing.JButton btConsultar;
    private javax.swing.JButton btExcluir;
    private javax.swing.JButton btInserir12;
    private javax.swing.JButton btLimpar;
    private javax.swing.JButton btSair;
    private javax.swing.JComboBox<String> cbVendedorResponsavel;
    private javax.swing.JTextField cxCidadeCliente;
    private javax.swing.JTextField cxCpfCliente;
    private javax.swing.JTextField cxEstadoCliente;
    private javax.swing.JTextField cxIdCliente;
    private javax.swing.JTextField cxNomeCliente;
    private javax.swing.JTextField cxNumCasaCliente;
    private javax.swing.JTextField cxRuaCliente;
    private javax.swing.JLabel rtCidCliente;
    private javax.swing.JLabel rtCpfCliente;
    private javax.swing.JLabel rtDadosCliente;
    private javax.swing.JLabel rtEndCliente;
    private javax.swing.JLabel rtEstadoCliente;
    private javax.swing.JLabel rtIdCliente;
    private javax.swing.JLabel rtNomeCliente;
    private javax.swing.JLabel rtNumCasaCliente;
    private javax.swing.JLabel rtRuaCliente;
    private javax.swing.JLabel rtVendRespCliente;
    // End of variables declaration//GEN-END:variables
}
